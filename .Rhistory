ad[1397]
ad[1398]
lo[1399]
la[1399]
ad[1399]
lo[1400]
la[1400]
ad[1400]
gc <- geocode(paste(data.factor$ADDRESS[1400], data.factor$CITY[1400], ' OKlahoma', sep = ',') , output = "latlona", source= "dsk")
gc
gc <- geocode(paste(data.factor$ADDRESS[1400], data.factor$CITY[1400], ' OKlahoma', sep = ',') , output = "latlona", source= "google")
gc
leng
leng(data.factor$ADDRESS)
length(data.factor$ADDRESS)
length(data.factor$COUNTY)
testfilenew[1]
testfileTnew[1]
testfileTnew[2]
length(testfileTnew)
for(n in 1397:leng){
#latlona gives lon, lat, and address info
gc <- geocode(paste(data.factor$ADDRESS[n], data.factor$CITY[n], ' OKlahoma', sep = ',') , output = "latlona", source= "google")
print(gc)# print the output
lo[n] <- gc$lon
la[n] <- gc$lat
ad[n] <- gc$address
#make sure the copy is correct
print(lo[n])
print(la[n])
print(ad[n])}
length(la)
length(lo)
length(la)
length(ad)
?cbind()
data.factor.cbind <- data.factor
data.factor.cbind <- cbind(data.factor.cbind, long= lo)
length(data.factor.cbind$long)
data.factor.cbind$long[1]
data.factor.cbind$CITY[1]
data.factor.cbind <- cbind(data.factor.cbind, lat= la)
data.factor.cbind$lat[1]
data.factor.cbind$CITY[1]
data.factor.cbind <- cbind(data.factor.cbind, geocode.address= ad)
#data.factor.cbind
data.factor.cbind$geocode.address[1]
write.csv(data.factor.cbind, "drug-lab-clean.csv", row.names = F )#without rows names
library(stringr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library('dplyr')
install.packages("dplyr")
library(dplyr)
library(dplyr.so)
library(dplyr)
filter(str_detect(data.factor.cbind$geocode.address, "ok"))
library(dplyr)
filter(str_detect(data.factor.cbind$geocode.address, "ok"))
install.packages("dplyr")
?sqldf
??sqldf
require(sqldf)
require(sq1df)
grep("ok", data.factor.cbind$geocode.address)
data.factor.cbind[grep("ok", data.factor.cbind$geocode.address), ]
data.factor.cbind[!grep("ok", data.factor.cbind$geocode.address), ]
data.factor.cbind[grep("ok|oklahomo", data.factor.cbind$geocode.address), ]
library(ggmap)
OkLocation = c(Lon=-97.5164, Lat=35.4676)
? get_map()
OkMap <- get_map(location = OkLocation, source = 'google', maptype = 'terrain', crop = FALSE, zoom = 10)
ggmap(OkMap)+geom_point(aes(x=data.factor.cbind$long, y=data.factor.cbind$lat), data = data.factor.cbind, alpha=0.5, color="steelblue", size=1)
dev.new()
ggmap(OkMap)+geom_point(aes(x=data.factor.cbind$long, y=data.factor.cbind$lat), data = data.factor.cbind, alpha=0.5, color="steelblue", size=1)
OkMap <- get_map(location = OkLocation, source = 'stamen', maptype = 'toner', crop = FALSE, zoom = 7)
dev.new()
ggmap(OkMap)+geom_point(aes(x=data.factor.cbind$long, y=data.factor.cbind$lat), data = data.factor.cbind, alpha=0.5, color="steelblue", size=1)
ggmap(OkMap)+geom_point(aes(x=data.factor.cbind$long, y=data.factor.cbind$lat), data = data.factor.cbind, alpha=0.5, color="steelblue", size=1)
ggmap(OkMap)+geom_point(aes(x=data.factor.cbind$long, y=data.factor.cbind$lat), data = data.factor.cbind, alpha=0.5, color="steelblue", size=1)
OkLocation = c(Lon=-97.5164, Lat=35.4676)
OkMap <- get_map(location = OkLocation, source = 'stamen', maptype = 'toner', crop = FALSE, zoom = 7)
ggmap(OkMap)+geom_point(aes(x=data.factor.cbind$long, y=data.factor.cbind$lat), data = data.factor.cbind, alpha=0.5, color="steelblue", size=1)
ggmap(okMap)
OkMap <- get_map(location = OkLocation, source = 'stamen', maptype = 'toner', crop = FALSE, zoom = 7)
library(ggmap)
OkLocation = c(Lon=-97.5164, Lat=35.4676)
OkMap <- get_map(location = OkLocation, source = 'stamen', maptype = 'toner', crop = FALSE, zoom = 7)
ggmap(okMap)
dev.new()
ggmap(OkMap) +
geom_point(aes(x=data.factor.cbind$long, y=data.factor.cbind$lat), data = data.factor.cbind, alpha=0.5, color="steelblue", size=1)
filename <- 'datadrug.txt'
#check if the name of the file exist open it, otherwise open the browser
if (!file.exists(filename)){
filename <- file.choose()
}
#Read filename line by line
mytxtfile = readLines(filename)
##Clean the data
#delet the three lines in the header
mytxtfilenew = mytxtfile[-(1:3)]
#delet the six lines in  the tail
#mytxtfileTail = mytxtfilenew[-(2753:length(mytxtfilenew))] # 2753=length of the file - 6 lines in the tail
#sign it to new object to make sure you have the original
testfile <- mytxtfilenew
#this loop is to clean the inside text in mytxtfilenew
len <- length(testfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i < len ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
testfile = testfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(testfile)
}
tail(testfile)
head(testfile)
filename <- 'datadrug.txt'
#check if the name of the file exist open it, otherwise open the browser
if (!file.exists(filename)){
filename <- file.choose()
}
#Read filename line by line
mytxtfile = readLines(filename)
##Clean the data
#delet the three lines in the header
mytxtfilenew = mytxtfile[-(1:3)]
#delet the six lines in  the tail
#mytxtfileTail = mytxtfilenew[-(2753:length(mytxtfilenew))] # 2753=length of the file - 6 lines in the tail
#sign it to new object to make sure you have the original
testfile <- mytxtfilenew
#this loop is to clean the inside text in mytxtfilenew
len <- length(testfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i < (len-6) ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
testfile = testfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(testfile)
}
tail(testfile)
##Clean the data
#delet the three lines in the header
mytxtfilenew = mytxtfile[-(1:3)]
#delet the six lines in  the tail
#mytxtfileTail = mytxtfilenew[-(2753:length(mytxtfilenew))] # 2753=length of the file - 6 lines in the tail
#sign it to new object to make sure you have the original
testfile <- mytxtfilenew
#this loop is to clean the inside text in mytxtfilenew
len <- length(testfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i <= len ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
testfile = testfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(testfile)
}
tail(testfile)
##Clean the data
#delet the three lines in the header
mytxtfilenew = mytxtfile[-(1:3)]
#delet the six lines in  the tail
#mytxtfileTail = mytxtfilenew[-(2753:length(mytxtfilenew))] # 2753=length of the file - 6 lines in the tail
#sign it to new object to make sure you have the original
testfile <- mytxtfilenew
#this loop is to clean the inside text in mytxtfilenew
len <- length(testfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i <= len ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
testfile = testfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(testfile)
print(ln)
}
filename <- 'datadrug.txt'
#check if the name of the file exist open it, otherwise open the browser
if (!file.exists(filename)){
filename <- file.choose()
}
#Read filename line by line
mytxtfile = readLines(filename)
##Clean the data
#delet the three lines in the header
mytxtfilenew = mytxtfile[-(1:3)]
#delet the six lines in  the tail
#mytxtfileTail = mytxtfilenew[-(2753:length(mytxtfilenew))] # 2753=length of the file - 6 lines in the tail
#sign it to new object to make sure you have the original
testfile <- mytxtfilenew
#this loop is to clean the inside text in mytxtfilenew
len <- length(testfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i <= len ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
testfile = testfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(testfile)
print(len)
}
mytxtfilenew = mytxtfile[-(1:3)]
#delet the six lines in  the tail
#mytxtfileTail = mytxtfilenew[-(2753:length(mytxtfilenew))] # 2753=length of the file - 6 lines in the tail
#sign it to new object to make sure you have the original
testfile <- mytxtfilenew
#this loop is to clean the inside text in mytxtfilenew
len <- length(testfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i <= len ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
testfile = testfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(testfile)
print(len)
print(i)
}
mytxtfilenew = mytxtfile[-(1:3)]
#delet the six lines in  the tail
#mytxtfileTail = mytxtfilenew[-(2753:length(mytxtfilenew))] # 2753=length of the file - 6 lines in the tail
#sign it to new object to make sure you have the original
testfile <- mytxtfilenew
#this loop is to clean the inside text in mytxtfilenew
len <- length(testfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i <= len+25 ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
testfile = testfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(testfile)
print(len)
print(i)
}
tail(testfile)
mytxtfilenew = mytxtfile[-(1:3)]
#delet the six lines in  the tail
#mytxtfileTail = mytxtfilenew[-(2753:length(mytxtfilenew))] # 2753=length of the file - 6 lines in the tail
#sign it to new object to make sure you have the original
testfile <- mytxtfilenew
#this loop is to clean the inside text in mytxtfilenew
len <- length(testfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i <= (len+25) ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
testfile = testfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(testfile)
print(len)
print(i)
}
tail(testfile)
mytxtfilenew = mytxtfile[-(1:3)]
#delet the six lines in  the tail
#mytxtfileTail = mytxtfilenew[-(2753:length(mytxtfilenew))] # 2753=length of the file - 6 lines in the tail
#sign it to new object to make sure you have the original
testfile <- mytxtfilenew
#this loop is to clean the inside text in mytxtfilenew
len <- length(testfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i <= (len+25) ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
testfile = testfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(testfile)
print("len", len)
print("i", i)
}
tail(testfile)
#Read filename line by line
mytxtfile = readLines(filename)
##Clean the data
#delet the three lines in the header
mytxtfilenew = mytxtfile[-(1:3)]
#delet the six lines in  the tail
#mytxtfileTail = mytxtfilenew[-(2753:length(mytxtfilenew))] # 2753=length of the file - 6 lines in the tail
#sign it to new object to make sure you have the original
testfile <- mytxtfilenew
#this loop is to clean the inside text in mytxtfilenew
len <- length(testfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i <= (len+25) ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
testfile = testfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(testfile)
print("len")
print(len)
print(i)
}
tail(testfile)
##Clean the data
#delet the three lines in the header
mytxtfilenew = mytxtfile[-(1:3)]
#delet the six lines in  the tail
#mytxtfileTail = mytxtfilenew[-(2753:length(mytxtfilenew))] # 2753=length of the file - 6 lines in the tail
#sign it to new object to make sure you have the original
testfile <- mytxtfilenew
#this loop is to clean the inside text in mytxtfilenew
len <- length(testfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i <= len ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
testfile = testfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(testfile)
print("len")
print(len)
print(i)
len=len+25
}
tail(testfile)
##Clean the data
#delet the three lines in the header
mytxtfilenew = mytxtfile[-(1:3)]
#delet the six lines in  the tail
#mytxtfileTail = mytxtfilenew[-(2753:length(mytxtfilenew))] # 2753=length of the file - 6 lines in the tail
#sign it to new object to make sure you have the original
testfile <- mytxtfilenew
#this loop is to clean the inside text in mytxtfilenew
len <- length(testfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i <= len ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
testfile = testfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(testfile)
print("len")
print(len)
print(i)
}
tail(testfile)
ls()
##open the text file
#assign the name of the text file
filename <- 'datadrug.txt'
#check if the name of the file exist open it, otherwise open the browser
if (!file.exists(filename)){
filename <- file.choose()
}
#Read filename line by line
mytxtfile = readLines(filename)
##Clean the data
#delet the three lines in the header
mytxtfilenew = mytxtfile[-(1:3)]
#sign it to new object to make sure you have the original
testfile <- mytxtfilenew
#this loop is to clean the inside text in mytxtfilenew
len <- length(testfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i < len ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
testfile = testfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(testfile)
}
#delet the six lines in  the tail
tail.start=length(testfile)-5 # the start of the tail 2402
testfileT= testfile[-(tail.start:length(testfile))] #clean the tail
mydata <- testfileT #making a copy of the final file
#clean empty rows in mydata
mydata[which(mydata=="")]#detect the empty lines in "mydata" object
mydata <- mydata[which(mydata!="")]#delet the empty lines in muy character object "mydata"
#create new object to keep my data frame
testfileTnew <- mydata
##WE START APPLYING REGEX ON testfileTnew
#regex county
COUNTY <- c()#create a vectore to save the county column
CITY <- c()#create a vectore to save the city column
ADDRESS <- c()#create a vectore to save the arress column
DATE <- c() #create a vectore to save the date column
for (i in 2:2400){
#regex county
l=i-1
k<-regexpr("\\w+", testfileTnew[i], perl = T)#to get the second word
m<-regmatches(testfileTnew[i], k)
COUNTY[l] <-m
#regex city
f<-regexpr("\\s\\w+", testfileTnew[i], perl = T)#using regex to match the first word
m <- regmatches(testfileTnew[i], f)
CITY[l] <- m
#regex address
t<-regexpr("\\s\\w+\\s\\w+\\s*(.+)\\s", testfileTnew[i], perl = T)
mm <- regmatches(testfileTnew[i], t)
if(length(mm)==0){
t<-regexpr("\\s\\w+\\s*(.+)\\s", testfileTnew[i], perl = T)
mm <- regmatches(testfileTnew[i], t)
}
ADDRESS[l] <- mm
#regex date
t<-regexpr("\\d+/\\d+/\\d+", testfileTnew[i], perl = T)
mm <- regmatches(testfileTnew[i], t)
if(length(mm)==0){
t<-regexpr("\\s", testfileTnew[i], perl = T)
mm <- regmatches(testfileTnew[i], t)
}
DATE[l] <-mm
}
#bind the four vectors in a data frame data.factor
data.factor <- data.frame(COUNTY, CITY, ADDRESS, DATE)
##write a csv file
write.csv(data.factor, "test.csv", row.names = F )#without rows names
data.factor.cbind <- data.factor # our new data frame. it has 7 parameters
data.factor.c <- cbind(data.factor.cbind, address1= COUNTY, address2=COUNTY)
data.factor.c$address1[1]
remove(data.factor.c)
data.factor <- cbind(data.factor, la=COUNTY)
#Pckages that are needed here
library("ggmap")#import geocode libraray/visualization
##open the text file
#assign the name of the text file
filename <- 'datadrug.txt'
#check if the name of the file exist open it, otherwise open the browser
if (!file.exists(filename)){
filename <- file.choose()}
#Read filename line by line
mytxtfile = readLines(filename)
##Clean the data
#delet the three lines in the header
mytxtfile = mytxtfile[-(1:3)]
#this loop is to clean the inside text in mytxtfilenew
len <- length(mytxtfile) # length of the object testfile
i <- 56 # the first text start at line 56
while(i < len ){
j=i+7 # the length of the text is 8 lines: first text begin at i=56, end at j= 56+7
mytxtfile = mytxtfile[-(i: j)] # delet the 8 lines text
# The text happens every 62 lines,
#and we have "-8" since our file is updated eveytime we delete 8 lines
i<-(i+62)-8
#we need to update the "len=file length" everytime we delelet 8 lines text
len <- length(mytxtfile)
}
#delet the six lines in  the tail
tail.start=length(mytxtfile)-5 # the start of the tail 2402
testfileT= testfile[-(tail.start:length(mytxtfile))] #clean the tail
#clean empty rows in mydata
mytxtfile[which(mytxtfile=="")]#detect the empty lines in "mydata" object
mytxtfile <- mytxtfile[which(mytxtfile!="")]#delet the empty lines in muy character object "mydata"
##WE START APPLYING REGEX ON testfileTnew
#regex county
COUNTY <- c()#create a vectore to save the county column
CITY <- c()#create a vectore to save the city column
ADDRESS <- c()#create a vectore to save the arress column
DATE <- c() #create a vectore to save the date column
for (i in 2:2400){
#regex county
l=i-1
pattren1<-regexpr("\\w+", mytxtfile[i], perl = T)#to get the second word
match1<-regmatches(mytxtfile[i], pattren1)
COUNTY[l] <-match1
#regex city
pattren2<-regexpr("\\s\\w+", mytxtfile[i], perl = T)#get the pattren
match2 <- regmatches(mytxtfile[i], pattren2)#match the pattren with our line of data
CITY[l] <- match2
#regex address
pattren3<-regexpr("\\s\\w+\\s\\w+\\s*(.+)\\s", mytxtfile[i], perl = T)#get the pattren
match3<- regmatches(mytxtfile[i], pattren3)#match the pattren with our line of data
if(length(match3)==0){ # taking care the case if the length is zero
pattren3<-regexpr("\\s\\w+\\s*(.+)\\s", mytxtfile[i], perl = T)
match3 <- regmatches(mytxtfile[i], pattren3)
}
ADDRESS[l] <- match3
#regex date
pattren4<-regexpr("\\d+/\\d+/\\d+", mytxtfile[i], perl = T)#get the pattren
match4 <- regmatches(mytxtfile[i], pattren4)#match the pattren with our line of data
if(length(match4)==0){ # taking care the case if the length is zero
pattren4 <-regexpr("\\s", mytxtfile[i], perl = T)
match4 <- regmatches(mytxtfile[i], pattren4)
}
DATE[l] <-match4
}
#bind the four vectors in a data frame data.factor
data.factor <- data.frame(COUNTY, CITY, ADDRESS, DATE)
##write a csv file
write.csv(data.factor, "test1.csv", row.names = F )#without rows names
